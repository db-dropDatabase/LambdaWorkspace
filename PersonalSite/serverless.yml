service:
  name: PersonalAPI

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-offline

# lets make a bucket!
resources:
  Resources:
    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.bucketName}
    # pull roles from the external file
    GithubCountRole: ${file(roles.yml):GithubCount}
    GithubPokeRole: ${file(roles.yml):GithubPoke}

provider:
  name: aws
  runtime: nodejs10.x
  region: us-west-2
  memorySize: 128
  timeout: 5
  # and while we're at it, lets tell the function what the bucket name is
  environment:
    bucketName: githubjsonbucket
    fileName: apicache.json
  # single API key and single rate limit
  # if you're reading this, please don't spam my API :(
  apiKeys:
    # this will be in the source of my website anyway, so there's no point in obfuscating it
    - superSecurePlaintextAPIKey-${opt:stage, self:provider.stage}
  usagePlan:
    throttle:
      burstLimit: 20 # I'm not that famous, right?
      rateLimit: 30 # Thirty per second is worrying, but it probably won't bankrupt me

custom:
  # conditionally enable features based on stage
  isProd:
    dev: false
    prod: true
  # exclude the aws-sdk to reduce bundle size
  webpackIncludeModules:
    forceExclude:
      - aws-sdk
  # custom domain endpoint!
  customDomain:
    # only use the custom domain if we are deploying to production
    enabled: ${self:custom.isProd.${opt:stage, self:provider.stage}}
    domainName: api.prototypical.pro
    certificateName: '*.prototypical.pro'
    createRoute53Record: true
    endpointType: 'regional'

functions:
  # the exposed API part
  getGithubCount:
    handler: githubcount.githubcount
    role: GithubCountRole
    events:
      - http:
          method: get
          path: githubcount
          # conditionally validate API key based on stage (see custom)
          private: ${self:custom.isProd.${opt:stage, self:provider.stage}}
          cors: true
  # the un-exposed IoT updating part
  pokeGithubCount:
    role: GithubPokeRole
    handler: githubpoke.githubpoke  
    # function specific secrets
    environment:
      github_token: ${file(secrets.yml):github_token}
    events:
      - schedule: 
          rate: rate(6 hours)
          enabled: ${self:custom.isProd.${opt:stage, self:provider.stage}}
      # for testing only
      # - http:
      #    method: get
      #    path: githubpoke
      #    # conditionally validate API key based on stage (see custom)
      #    private: ${self:custom.isProd.${opt:stage, self:provider.stage}}
