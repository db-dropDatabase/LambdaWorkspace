service:
  name: PersonalAPI

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-offline

# lets make a bucket!
resources:
  Resources:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:provider.environment.bucketName}

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  memorySize: 128
  timeout: 3
  # give permissions to these functions to read/write my s3 bucket, defined in resources
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: 
        Fn::Join:
           - ""
           - - Fn::GetAtt:
                - ${self:provider.environment.bucketName}
                - "Arn"
             - /${self:provider.environment.fileName}
  # and while we're at it, lets tell the function what the bucket name is
  environment:
    bucketName: githubjsonbucket
    fileName: apicache.json
  # API key based rate limiting
  # single API key and single rate limit
  # if you're reading this, please don't spam my API :(
  apiKeys:
    # this will be in the source of my website anyway, so there's no point in obfuscating it
    - superSecurePlaintextAPIKey
  usagePlan:
    throttle:
      burstLimit: 20 # I'm not that famous, right?
      rateLimit: 30 # Thirty per second is worrying, but it probably won't bankrupt me

custom:
  # conditionally validate API key based on stage
  private:
    dev: false
    prod: true
  # exclude the aws-sdk to reduce bundle size
  webpackIncludeModules:
    forceExclude:
      - aws-sdk
  # custom domain endpoint!
  customDomain:
    domainName: api.prototypical.pro
    certificateName: '*.prototypical.pro'
    createRoute53Record: true
    endpointType: 'regional'

functions:
  # the exposed API part
  getGithubCount:
    enabled: false
    handler: githubcount.githubcount
    events:
      - http:
          method: get
          path: githubcount
          # conditionally validate API key based on stage (see custom)
          private: ${self:custom.private.${opt:stage, self:provider.stage}}
  # the un-exposed IoT updating part
  #pokeGithubCount:
  #  handler: handler.githubpoke
  #  events:  
