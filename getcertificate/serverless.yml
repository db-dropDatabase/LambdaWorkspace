# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: GetCertificate # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  # conditionally enable features based on stage
  isProd:
    dev: false
    prod: true
  # python stuff
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
  # custom domain endpoint!
  customDomain:
    # only use the custom domain if we are deploying to production
    enabled: ${self:custom.isProd.${opt:stage, self:provider.stage}}
    domainName: certutil.prototypical.pro
    certificateName: '*.prototypical.pro'
    createRoute53Record: true
    endpointType: 'regional'

provider:
  name: aws
  runtime: python3.7
  region: us-west-2
  memorySize: 128
  timeout: 8
  # Environment Variables
  environment:
    # API key for the google safe browsing API
    google_api_key: ${file(./secrets.yml):google_api_key}


functions:
  # get the root certificate for a list of domains
  getRootCert:
    handler: handler.get_root
    reservedConcurrency: 5 
    events:
      - http:
          path: /getrootcert
          method: get
          cors: true
  # get the certificate for a list of domains
  getCert:
    handler: handler.get_cert
    reservedConcurrency: 5 
    events:
      - http:
          path: /getcert
          method: get
          cors: true
  # get the BearSSL formatted header file of trust anchors for some domains
  getHeader:
    handler: handler.get_header
    reservedConcurrency: 5 
    events:
      - http:
          path: /getheader
          method: get
          cors: true